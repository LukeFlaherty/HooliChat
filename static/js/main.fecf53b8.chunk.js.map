{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","src","FormControl","Input","value","placeholder","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RA+BeA,G,MA1BCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACpBC,EADiD,EAApBC,WACPF,EAAQE,SACpC,OAGQ,aADJ,CACI,OAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAA/C,SACA,cAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,qBAAhD,SACI,cAACI,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,KAHd,WASMR,GAAD,UAAcD,EAAQE,UAAY,YAAlC,MATL,IASyDF,EAAQA,qB,QCKlEU,EAtBKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,sDACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKIC,Y,iCCsERC,MA7Ef,WAAe,MAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAImBF,mBAAS,IAJ5B,mBAING,EAJM,KAIIC,EAJJ,OAMmBJ,mBAAS,IAN5B,mBAMNrB,EANM,KAMI0B,EANJ,KA+Cb,OAtCAC,qBAAU,WAERD,EAAYE,OAAO,uBAClB,IAKHD,qBAAU,WACRnB,EAAGqB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVP,EAAYO,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAItC,QAASqC,EAAIE,iBAEjE,IAyBD,sBAAKpC,UAAU,MAAf,UACE,qBAAKqC,IAAI,kFAET,sBAAMrC,UAAU,YAAhB,SAEA,eAACsC,EAAA,EAAD,CAAatC,UAAU,mBAAvB,UACE,cAACuC,EAAA,EAAD,CAAOvC,UAAU,aAAawC,MAAOnB,EAAOoB,YAAY,eAAeC,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOJ,UAChH,cAACK,EAAA,EAAD,CAAY7C,UAAU,kBAAkB8C,UAAWzB,EAAOhB,QAAQ,YAAYD,MAAM,UAAU2C,KAAK,SAASC,QA7B9F,SAACL,GAEnBA,EAAMM,iBAIN1C,EAAGqB,WAAW,YAAYsB,IAAI,CAC5BrD,QAASwB,EACTtB,SAAUA,EACVoD,UAAW3C,IAASU,UAAUkC,WAAWC,oBAS3C/B,EAAS,KAWL,SACE,cAAC,IAAD,WAOJ,cAAC,IAAD,UAIEC,EAASU,KAAI,gBAAEE,EAAF,EAAEA,GAAItC,EAAN,EAAMA,QAAN,OACX,cAAC,EAAD,CAAkBE,SAAUA,EAAUF,QAASA,GAAjCsC,YCnETmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fecf53b8.chunk.js","sourcesContent":["// es7 snippets\nimport React, { forwardRef } from 'react';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport './Message.css';\n\nconst Message = forwardRef(({ message, username }, ref) => {\n    const isUser = username === message.username;\n    return (\n        \n        // using BEM standard for styling componant\n            <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\n                <CardContent>\n                <Typography\n                    color=\"white\"\n                    variant=\"h5\"\n                    component=\"h2\"\n                >\n                    {/* if it is not you hsow the name \n                    string interpolation\n                    */}\n                    {/* if people skip the name prompt then it says null, change it to Anonymous */}\n                    {!isUser && `${message.username || 'Anonymous'}: `} {message.message}\n                </Typography>\n                </CardContent>\n            </Card>\n            </div>\n            \n    )\n})\n\nexport default Message\n","// config file for firebase\n\nimport firebase from \"firebase\";\n\n// passing the config object\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyBiwhDxKkOLHuwkC-OdbS6GtUaEEwoEdvc\",\n    authDomain: \"messenger-b5472.firebaseapp.com\",\n    databaseURL: \"https://messenger-b5472-default-rtdb.firebaseio.com\",\n    projectId: \"messenger-b5472\",\n    storageBucket: \"messenger-b5472.appspot.com\",\n    messagingSenderId: \"894897027401\",\n    appId: \"1:894897027401:web:70589e78103cd863044298\",\n    measurementId: \"G-086PMPBKFY\"  \n});\n\n// initialize this object\n// firestore is where the database it\nconst db = firebaseApp.firestore();\n\n// installing firebase via the terminal using this line\n// sudo npm install -g firebase-tools\n// bck-i-search: tool_\n// firebase init\n// npm run build\n\n\nexport default db;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\n\nfunction App() {\n  // initializing state\n  const [input, setInput] = useState('');\n  // use another peice of state to store messages\n  const [messages, setMessages] = useState([]);\n  // to remember user\n  const [username, setUsername] = useState('');\n\n  // useState is a variable in react and useEffect is a block of code that gets executed based on a condition\n  useEffect(() => {\n    // const name = prompt('Enter your name:');\n    setUsername(prompt('Enter your name:'))\n  }, [] ) //condition goes [], if it blank than it loads when app component loads\n\n  // run once when the app loads and none after that\n  // reads from the db and outputs the previous messages\n  // had to do funky stuff with firebase permissions\n  useEffect(() => {\n    db.collection('messages')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    });\n  }, [] )\n\n\n  const sendMessage = (event) => {\n    // stops the form from refreshing\n    event.preventDefault();\n\n    // sending to db\n    // server timestamp is huge\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    // going to put all the logic to send a message here\n    // push to array state\n    // ... says to space out the input in the array OR keep all current but append to the end\n    // setMessages([...messages, {username: username, text: input}])\n\n    //clear the input once sent\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://hoolichat.com/wp-content/uploads/2020/04/HooliChat-e1587758763209.jpg\" />\n\n      <form className=\"app__form\">\n      \n      <FormControl className=\"app__formControl\">\n        <Input className=\"app__input\" value={input} placeholder=\"say hello...\" onChange={event => setInput(event.target.value)}/>\n        <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>\n          <SendIcon />\n        </IconButton>\n        {/* <Button disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>Send Message</Button> */}\n      </FormControl>\n\n      </form>\n\n      <FlipMove>\n      {\n        // easy way to loop through and return html\n        // the key is very important, take it out and see what happens\n        messages.map(({id, message}) => (\n          <Message key={id} username={username} message={message} />\n        ))\n      }\n      </FlipMove>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}